
// Generated by Akka gRPC. DO NOT EDIT.
package shopping.cart.proto

import scala.concurrent.ExecutionContext

import io.grpc.MethodDescriptor

import akka.actor.ClassicActorSystemProvider

import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.Marshaller
import akka.grpc.internal.NettyClientUtils
import akka.grpc.internal.ClientState

import akka.grpc.scaladsl.StreamResponseRequestBuilder
import akka.grpc.internal.ScalaServerStreamingRequestBuilder

// Not sealed so users can extend to write their stubs
trait StreamPopularityServiceClient extends StreamPopularityService with StreamPopularityServiceClientPowerApi with AkkaGrpcClient

object StreamPopularityServiceClient {
  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): StreamPopularityServiceClient =
    new DefaultStreamPopularityServiceClient(settings)
}

final class DefaultStreamPopularityServiceClient(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider) extends StreamPopularityServiceClient {
  import DefaultStreamPopularityServiceClient._

  private implicit val ex: ExecutionContext = sys.classicSystem.dispatcher
  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings, akka.event.Logging(sys.classicSystem, this.getClass))

  
    private def streamPopularityRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        val fqName = "shoppingcart.StreamPopularityService.StreamPopularity"
        
          new ScalaServerStreamingRequestBuilder(streamPopularityDescriptor, fqName, channel, options, settings)
        
      
    }
  
    private def streamItemAddedRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        val fqName = "shoppingcart.StreamPopularityService.StreamItemAdded"
        
          new ScalaServerStreamingRequestBuilder(streamItemAddedDescriptor, fqName, channel, options, settings)
        
      
    }
  

  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer streamPopularity(shopping.cart.proto.TickerSymbol) if possible.
     */
    
      override def streamPopularity(): StreamResponseRequestBuilder[shopping.cart.proto.TickerSymbol, shopping.cart.proto.ListItemPopularity] =
        streamPopularityRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of streamPopularity
     */
    def streamPopularity(in: shopping.cart.proto.TickerSymbol): akka.stream.scaladsl.Source[shopping.cart.proto.ListItemPopularity, akka.NotUsed] =
      streamPopularity().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer streamItemAdded(shopping.cart.proto.Cart) if possible.
     */
    
      override def streamItemAdded(): StreamResponseRequestBuilder[shopping.cart.proto.Cart, shopping.cart.proto.Cart] =
        streamItemAddedRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of streamItemAdded
     */
    def streamItemAdded(in: shopping.cart.proto.Cart): akka.stream.scaladsl.Source[shopping.cart.proto.Cart, akka.NotUsed] =
      streamItemAdded().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed: scala.concurrent.Future[akka.Done] = clientState.closed()

}



private object DefaultStreamPopularityServiceClient {

  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): StreamPopularityServiceClient =
    new DefaultStreamPopularityServiceClient(settings)

  import StreamPopularityService.Serializers._

  
    private val streamPopularityDescriptor: MethodDescriptor[shopping.cart.proto.TickerSymbol, shopping.cart.proto.ListItemPopularity] =
      MethodDescriptor.newBuilder()
        .setType(
  
  
   MethodDescriptor.MethodType.SERVER_STREAMING 
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("shoppingcart.StreamPopularityService", "StreamPopularity"))
        .setRequestMarshaller(new Marshaller(TickerSymbolSerializer))
        .setResponseMarshaller(new Marshaller(ListItemPopularitySerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val streamItemAddedDescriptor: MethodDescriptor[shopping.cart.proto.Cart, shopping.cart.proto.Cart] =
      MethodDescriptor.newBuilder()
        .setType(
  
  
   MethodDescriptor.MethodType.SERVER_STREAMING 
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("shoppingcart.StreamPopularityService", "StreamItemAdded"))
        .setRequestMarshaller(new Marshaller(CartSerializer))
        .setResponseMarshaller(new Marshaller(CartSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
}

trait StreamPopularityServiceClientPowerApi {
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer streamPopularity(shopping.cart.proto.TickerSymbol) if possible.
     */
    
      def streamPopularity(): StreamResponseRequestBuilder[shopping.cart.proto.TickerSymbol, shopping.cart.proto.ListItemPopularity] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer streamItemAdded(shopping.cart.proto.Cart) if possible.
     */
    
      def streamItemAdded(): StreamResponseRequestBuilder[shopping.cart.proto.Cart, shopping.cart.proto.Cart] = ???
    
  

}
