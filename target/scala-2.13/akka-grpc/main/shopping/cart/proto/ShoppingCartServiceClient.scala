
// Generated by Akka gRPC. DO NOT EDIT.
package shopping.cart.proto

import scala.concurrent.ExecutionContext

import io.grpc.MethodDescriptor

import akka.actor.ClassicActorSystemProvider

import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.Marshaller
import akka.grpc.internal.NettyClientUtils
import akka.grpc.internal.ClientState

import akka.grpc.scaladsl.SingleResponseRequestBuilder
import akka.grpc.internal.ScalaUnaryRequestBuilder

// Not sealed so users can extend to write their stubs
trait ShoppingCartServiceClient extends ShoppingCartService with ShoppingCartServiceClientPowerApi with AkkaGrpcClient

object ShoppingCartServiceClient {
  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): ShoppingCartServiceClient =
    new DefaultShoppingCartServiceClient(settings)
}

final class DefaultShoppingCartServiceClient(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider) extends ShoppingCartServiceClient {
  import DefaultShoppingCartServiceClient._

  private implicit val ex: ExecutionContext = sys.classicSystem.dispatcher
  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings, akka.event.Logging(sys.classicSystem, this.getClass))

  
    private def addItemRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        new ScalaUnaryRequestBuilder(addItemDescriptor, channel, options, settings)
      
    }
  
    private def checkoutRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        new ScalaUnaryRequestBuilder(checkoutDescriptor, channel, options, settings)
      
    }
  
    private def getCartRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        new ScalaUnaryRequestBuilder(getCartDescriptor, channel, options, settings)
      
    }
  
    private def getItemPopularityRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        new ScalaUnaryRequestBuilder(getItemPopularityDescriptor, channel, options, settings)
      
    }
  

  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer addItem(shopping.cart.proto.AddItemRequest) if possible.
     */
    
      override def addItem(): SingleResponseRequestBuilder[shopping.cart.proto.AddItemRequest, shopping.cart.proto.Cart] =
        addItemRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of addItem
     */
    def addItem(in: shopping.cart.proto.AddItemRequest): scala.concurrent.Future[shopping.cart.proto.Cart] =
      addItem().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer checkout(shopping.cart.proto.CheckoutRequest) if possible.
     */
    
      override def checkout(): SingleResponseRequestBuilder[shopping.cart.proto.CheckoutRequest, shopping.cart.proto.Cart] =
        checkoutRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of checkout
     */
    def checkout(in: shopping.cart.proto.CheckoutRequest): scala.concurrent.Future[shopping.cart.proto.Cart] =
      checkout().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getCart(shopping.cart.proto.GetCartRequest) if possible.
     */
    
      override def getCart(): SingleResponseRequestBuilder[shopping.cart.proto.GetCartRequest, shopping.cart.proto.Cart] =
        getCartRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of getCart
     */
    def getCart(in: shopping.cart.proto.GetCartRequest): scala.concurrent.Future[shopping.cart.proto.Cart] =
      getCart().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getItemPopularity(shopping.cart.proto.GetItemPopularityRequest) if possible.
     */
    
      override def getItemPopularity(): SingleResponseRequestBuilder[shopping.cart.proto.GetItemPopularityRequest, shopping.cart.proto.GetItemPopularityResponse] =
        getItemPopularityRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of getItemPopularity
     */
    def getItemPopularity(in: shopping.cart.proto.GetItemPopularityRequest): scala.concurrent.Future[shopping.cart.proto.GetItemPopularityResponse] =
      getItemPopularity().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed: scala.concurrent.Future[akka.Done] = clientState.closed()

}



private object DefaultShoppingCartServiceClient {

  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): ShoppingCartServiceClient =
    new DefaultShoppingCartServiceClient(settings)

  import ShoppingCartService.Serializers._

  
    private val addItemDescriptor: MethodDescriptor[shopping.cart.proto.AddItemRequest, shopping.cart.proto.Cart] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("shoppingcart.ShoppingCartService", "AddItem"))
        .setRequestMarshaller(new Marshaller(AddItemRequestSerializer))
        .setResponseMarshaller(new Marshaller(CartSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val checkoutDescriptor: MethodDescriptor[shopping.cart.proto.CheckoutRequest, shopping.cart.proto.Cart] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("shoppingcart.ShoppingCartService", "Checkout"))
        .setRequestMarshaller(new Marshaller(CheckoutRequestSerializer))
        .setResponseMarshaller(new Marshaller(CartSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val getCartDescriptor: MethodDescriptor[shopping.cart.proto.GetCartRequest, shopping.cart.proto.Cart] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("shoppingcart.ShoppingCartService", "GetCart"))
        .setRequestMarshaller(new Marshaller(GetCartRequestSerializer))
        .setResponseMarshaller(new Marshaller(CartSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val getItemPopularityDescriptor: MethodDescriptor[shopping.cart.proto.GetItemPopularityRequest, shopping.cart.proto.GetItemPopularityResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("shoppingcart.ShoppingCartService", "GetItemPopularity"))
        .setRequestMarshaller(new Marshaller(GetItemPopularityRequestSerializer))
        .setResponseMarshaller(new Marshaller(GetItemPopularityResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
}

trait ShoppingCartServiceClientPowerApi {
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer addItem(shopping.cart.proto.AddItemRequest) if possible.
     */
    
      def addItem(): SingleResponseRequestBuilder[shopping.cart.proto.AddItemRequest, shopping.cart.proto.Cart] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer checkout(shopping.cart.proto.CheckoutRequest) if possible.
     */
    
      def checkout(): SingleResponseRequestBuilder[shopping.cart.proto.CheckoutRequest, shopping.cart.proto.Cart] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getCart(shopping.cart.proto.GetCartRequest) if possible.
     */
    
      def getCart(): SingleResponseRequestBuilder[shopping.cart.proto.GetCartRequest, shopping.cart.proto.Cart] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getItemPopularity(shopping.cart.proto.GetItemPopularityRequest) if possible.
     */
    
      def getItemPopularity(): SingleResponseRequestBuilder[shopping.cart.proto.GetItemPopularityRequest, shopping.cart.proto.GetItemPopularityResponse] = ???
    
  

}
